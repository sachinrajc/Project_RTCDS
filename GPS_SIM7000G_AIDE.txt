#include <HardwareSerial.h>

// Define pins
#define SIM_PWR_PIN 4    // PWR pin on SIM7000G connected to GPIO 4
#define SIM_TX 17        // ESP32 TX connected to SIM7000G RXD
#define SIM_RX 16        // ESP32 RX connected to SIM7000G TXD

// Initialize Serial2 for SIM7000G communication
HardwareSerial sim7000(2);

const char phoneNumber[] = "+110987654321";  // Replace with your target number

void setup() {
  // Start Serial for debugging and SIM7000G communication
  Serial.begin(115200);
  sim7000.begin(9600, SERIAL_8N1, SIM_RX, SIM_TX);  // RX, TX for ESP32

  // Power on the SIM7000G module
  pinMode(SIM_PWR_PIN, OUTPUT);#include <HardwareSerial.h>

// Define pins
#define SIM_PWR_PIN 4    // PWR pin on SIM7000G connected to GPIO 4
#define SIM_TX 17        // ESP32 TX connected to SIM7000G RXD
#define SIM_RX 16        // ESP32 RX connected to SIM7000G TXD

// Initialize Serial2 for SIM7000G communication
HardwareSerial sim7000(2);

const char phoneNumber[] = "+12262240296";  

// Function prototypes
void sendCommand(String command);
String getGPSData();
void sendSMS(String phoneNumber, String message);

void setup() 
{
  Serial.begin(115200);
  sim7000.begin(9600, SERIAL_8N1, SIM_RX, SIM_TX);  // RX, TX for ESP32

  // Power on the SIM7000G module
  pinMode(SIM_PWR_PIN, OUTPUT);
  digitalWrite(SIM_PWR_PIN, HIGH); // Power ON the module
  delay(3000);                     // Allow time to power on

  Serial.println("Initializing SIM7000G...");

  // Initialize GPS and wait for fix
  sendCommand("AT");                // Basic test command
  sendCommand("AT+CGNSPWR=1");      // Enable GPS
  delay(10000);                     // Give GPS time to get a fix

  // Attempt to fetch GPS data and send the whole response via SMS
  String gpsData = getGPSData();
  if (gpsData != "") 
  {
    Serial.println("GPS Data: " + gpsData);
    sendSMS(phoneNumber, gpsData);  // Send the full GPS data as SMS
  } else 
  {
    Serial.println(" ");
  }
}

void loop() 
{
  // Nothing to do in loop
}

// Function to send AT commands and read response
void sendCommand(String command) 
{
  sim7000.println(command);
  delay(1000);
  while (sim7000.available()) 
  {
    Serial.write(sim7000.read());
  }
}

// Function to get the entire +CGNSINF GPS response
String getGPSData() {
  sendCommand("AT+CGNSINF");  // Request GNSS information
  delay(2000);

  String gpsData = "";
  if (sim7000.available()) 
  {
    gpsData = sim7000.readString();  // Read the full response from SIM7000G
    if (gpsData.indexOf("+CGNSINF:") >= 0) 
    {
      return gpsData;  // Return the full response string
    }
  }
  return "";  // Return empty if no GPS data
}

// Function to send SMS
void sendSMS(String phoneNumber, String message) 
{
  sendCommand("AT+CMGF=1");  // Set SMS to text mode
  delay(1000);

  sim7000.print("AT+CMGS=\"");
  sim7000.print(phoneNumber);
  sim7000.println("\"");
  delay(1000);

  sim7000.print(message);  // Send the message content
  delay(500);

  sim7000.write(26);  // Send Ctrl+Z (ASCII 26) to indicate end of message
  delay(5000);  // Wait for SMS to be sent

  Serial.println("SMS sent: " + message);
}


/*
[env:esp32dev]
platform = espressif32
board = esp32dev
framework = arduino
monitor_speed = 115200
*/