/*=============================================================================
	File Name:	ELNC6007SRCLab7.c  
	Author:		Sachin Raj Charupadikkal
	Date:		19/07/2024
	Modified:	None
	Â© Fanshawe College, 2024

	Description:Configuring, programming and compiling the microcontroller for interrupting 
				the timer running when the string is received from the keyboard input. And
				displays the output in the Tera Term application.
				Microcontroller used is PIC18F45K22
=============================================================================*/

/* Preprocessor ===============================================================
   Hardware Configuration Bits ==============================================*/
#pragma config FOSC       = INTIO67
#pragma config PLLCFG     = OFF
#pragma config PRICLKEN   = ON
#pragma config FCMEN      = OFF
#pragma config IESO       = OFF
#pragma config PWRTEN     = OFF 
#pragma config BOREN      = ON
#pragma config BORV       = 285 
#pragma config WDTEN      = OFF
#pragma config PBADEN     = OFF
#pragma config LVP        = OFF
#pragma config MCLRE      = EXTMCLR

// Libraries ==================================================================
#include <p18f45k22.h>
#include <stdio.h>
#include <string.h>

// Constants  =================================================================
#define TRUE            1    
#define FALSE           0    

#define GPS_BUFFER_SIZE 128
#define GPGGA_HEADER    "$GPGGA"
#define RC1FLAG         PIR1bits.RC1IF
#define TOKENSIZE		15

// Global Variables  ==========================================================
char rcBuf[GPS_BUFFER_SIZE];  // Buffer to store GPS data
unsigned char insert = 0;     // Index for data insertion
char sentenceReady = FALSE;
char GPGGA[6]="GPRMC";
char *tokens[TOKENSIZE];

char *latitude = "N/A";
char *latDir = "N/A";
char *longitude = "N/A";
char *longDir = "N/A";

// Function Prototypes ========================================================
void setOSC4MHZ(void);
void setPorts(void);
void configSerialPort(void);
void configINTS(void);
void systemInitialization(void);
void parseSent(char *ptr);
void exeSent();
void isr(void);

// Interrupt Vector  ==========================================================
#pragma code interruptVector = 0x0008
void interruptVector()
{
    _asm
    GOTO isr
    _endasm    
}

#pragma code  // save following in normal code space

// Functions ==================================================================

/*>>> config4MHZ: ===========================================================
Author:		Sachin Raj Charupadikkal
Date:		17/05/2024
Modified:	None
Desc:		Setting the microcontroller oscillator frequency to 4MHZ
Input: 		None
Returns:	None 
 ============================================================================*/
void setOSC4MHZ(void)
{
    OSCCON = 0x52;
    while (!OSCCONbits.HFIOFS);
} // eo setOSC4MHZ::

/*>>> configPorts: ===========================================================
Author:		Sachin Raj Charupadikkal
Date:		24/05/2024
Modified:	None
Desc:		Setting the PORTA for pushbutton input, PORTD for LED output and set rest 
			of the ports to default configuration as Digital Input.
Input: 		None
Returns:	None 
 ============================================================================*/
void setPorts(void)
{
    ANSELC = 0x00;
    TRISC = 0xC0;    
} // eo setPorts::

/*>>> configSerialPort: =======================================================
Author:		Sachin Raj Charupadikkal
Date:		21/06/2024
Modified:	None
Desc:		Serial port on, TX & RX enabled, 8bit transmission, No parity, 
			9600 baud rate.
Input: 		None
Returns:	None 
 ============================================================================*/
void configSerialPort(void)
{
    BAUDCON1 = 0x40;  // BRG16 = 1
    TXSTA1 = 0x26;    // TXEN = 1, SYNC = 0, BRGH = 1
    RCSTA1 = 0x90;    // SPEN = 1, CREN = 1
    SPBRG1 = 25;      // Baud rate = 9600 for Fosc = 4 MHz
    SPBRGH1 = 0x00;
} // eo configSerialPort::

/*>>> configINTS: ===========================================================
Author:		Sachin Raj Charupadikkal
Date:		19/07/2024
Modified:	None
Desc:		
Input: 		None
Returns:	None 
 ============================================================================*/
void configINTS(void)
{
    PIE1bits.RC1IE = TRUE;       // USART 1 Receiver Interrupt enabled
    INTCONbits.GIE = TRUE;       // Global Interrupt Enable
    INTCONbits.PEIE = TRUE;      // Peripheral Interrupt Enable
} // eo configINTS::

/*>>> systemInitialization: ===========================================================
Author:		Sachin Raj Charupadikkal
Date:		07/06/2024
Modified:	Added configSP1 function. 21/06/2024
Desc:		Calling the configuration functions such as frequency, ports and configTMR0 
			in a single function.
Input: 		None
Returns:	None 
 ============================================================================*/
void systemInitialization(void)
{
    setOSC4MHZ();
    setPorts();
    configSerialPort();
    configINTS();
} // eo systemInitialization::

// Parse Sentence into Tokens
void parseSent(char *ptr)
{
    char tokenCount=0;
    while(*ptr && tokenCount < TOKENSIZE){
        if(*ptr == '$' || *ptr == ',')
		{
            *ptr='\0';
            tokens[tokenCount]=ptr+1;
            tokenCount++;
        }
        ptr++;
    }
}

// Execute and Print Latitude and Longitude
void exeSent()
{
    //printf("\n\rReceived GPS sentence: %s\n", rcBuf); // Print the entire sentence

    if (strcmp(GPGGA,tokens[0])==0) // Check if sentence starts with $GPGGA
    {
        // Extract Latitude and Longitude
        latitude = tokens[3];     // Latitude value
        latDir = tokens[4];       // N/S direction
        longitude = tokens[5];    // Longitude value
        longDir = tokens[6];      // E/W direction

        // Print the parsed values
        printf("Location: %s%s %s%s \n\r", latitude, latDir, longitude, longDir);
    }
}

// Interrupt Service Routine
#pragma interrupt isr
void isr(void)
{
    if (RC1FLAG)  
    {
        char receivedChar = RCREG1;

        // Reset buffer index if new data starts
        if (receivedChar == '$')
        {
            insert = 0;
        }

        // Store character in buffer
        if (insert < GPS_BUFFER_SIZE - 1) // Prevent overflow
        {
            rcBuf[insert++] = receivedChar;
        }

        // Check for end of sentence
        if (receivedChar == '\n')
        {
            rcBuf[insert] = '\0';   // Null-terminate the buffer
            sentenceReady = TRUE;  // Set flag for processing in main
        }
    }
}

// Main Function
void main(void)
{
    systemInitialization();
    
    while (TRUE)
    {
        if (sentenceReady)
        {
            sentenceReady = FALSE;   // Reset flag

            // Parse and execute the received sentence
			
            parseSent(rcBuf);
            exeSent();
			//Delay10KTCYx(20);
        }
    }
}
